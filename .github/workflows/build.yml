name: Build and push Docker image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #     - name: Install dependencies
  #       run: npm install
  #     - name: Run linter
  #       run: npm run lint

  test-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      # Common
      OPEN_DPP_PORT: "3000"
      OPEN_DPP_URL: "http://dpp.example.de"
      OPEN_DPP_SERVICE_TOKEN: "test-servivce-token"
      OPEN_DPP_AAS_TOKEN: "test-servivce-token"
      # MongoDB
      OPEN_DPP_MONGODB_PORT: "27017"
      OPEN_DPP_MONGODB_HOST: "localhost"
      OPEN_DPP_MONGODB_USER: "admin"
      OPEN_DPP_MONGODB_PASSWORD: "test-mongo-password"
      OPEN_DPP_MONGODB_DATABASE: "management"
      # AI
      OPEN_DPP_MISTRAL_API_KEY: "your-mistral-key"
      OPEN_DPP_OLLAMA_URL: "https://ollama-url"
      OPEN_DPP_MCP_URL: "http://localhost:3002/sse"
      # Keycloak
      OPEN_DPP_KEYCLOAK_URL: "https://auth.example.de"
      OPEN_DPP_KEYCLOAK_REALM: "open-dpp"
      OPEN_DPP_KEYCLOAK_USER: "admin"
      OPEN_DPP_KEYCLOAK_PASSWORD: "test-keycloak-password"
      OPEN_DPP_KEYCLOAK_JWT_AUDIENCE: "account"
      # S3
      OPEN_DPP_S3_ENDPOINT: "minio"
      OPEN_DPP_S3_PORT: "9000"
      OPEN_DPP_S3_SSL: "false"
      OPEN_DPP_S3_ACCESS_KEY: "minioadmin"
      OPEN_DPP_S3_SECRET_KEY: "test-minio-password"
      OPEN_DPP_S3_DEFAULT_BUCKET: "dpp"
      OPEN_DPP_S3_PROFILE_PICTURE_BUCKET: "profile-pictures"
      # ClamAV
      OPEN_DPP_CLAMAV_URL: "http://clamav"
      OPEN_DPP_CLAMAV_PORT: "3310"

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start database
        run: |
          docker compose -f docker-compose-test.yml up -d

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Wait for Databases to be ready
      - name: Wait for Databases to be ready
        run: |
          echo "Waiting for MongoDB to start..."
          until nc -z ${{ env.OPEN_DPP_MONGODB_HOST }} ${{ env.OPEN_DPP_MONGODB_PORT }}; do
            sleep 1
          done

      # Step 5: Run tests
      - name: Run tests
        run: npm run test

  test-frontend:
    runs-on: ubuntu-latest
    env:
      KEYCLOAK_DISABLED: "true"
      VITE_API_ROOT: "http://localhost"
      VITE_KEYCLOAK_ROOT: "http://localhost"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: npm run ui:install
      - name: Run tests
        run: npm run ui:test

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          build-args: |
            APP_NAME=main
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max