name: Build and push Docker image

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      # Step 4: Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 5: Run linting
      - name: Run linter
        run: pnpm run lint

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      NODE_VERSION: 24
      # Common
      OPEN_DPP_PORT: "3000"
      OPEN_DPP_URL: "http://dpp.example.de"
      OPEN_DPP_SERVICE_TOKEN: "test-servivce-token"
      OPEN_DPP_AAS_TOKEN: "test-servivce-token"
      # MongoDB
      OPEN_DPP_MONGODB_PORT: "27017"
      OPEN_DPP_MONGODB_HOST: "localhost"
      OPEN_DPP_MONGODB_USER: "admin"
      OPEN_DPP_MONGODB_PASSWORD: "test-mongo-password"
      OPEN_DPP_MONGODB_DATABASE: "management"
      # AI
      OPEN_DPP_MISTRAL_API_KEY: "your-mistral-key"
      OPEN_DPP_OLLAMA_URL: "https://ollama-url"
      OPEN_DPP_MCP_URL: "http://localhost:3002/sse"
      # S3
      OPEN_DPP_S3_ENDPOINT: "minio"
      OPEN_DPP_S3_PORT: "9000"
      OPEN_DPP_S3_SSL: "false"
      OPEN_DPP_S3_ACCESS_KEY: "minioadmin"
      OPEN_DPP_S3_SECRET_KEY: "test-minio-password"
      OPEN_DPP_S3_DEFAULT_BUCKET: "dpp"
      OPEN_DPP_S3_PROFILE_PICTURE_BUCKET: "profile-pictures"
      # ClamAV
      OPEN_DPP_CLAMAV_URL: "http://clamav-rest"
      OPEN_DPP_CLAMAV_PORT: "9000"
      # MCP
      OPEN_DPP_MCP_PORT: "3001"
      # Mail
      OPEN_DPP_MAIL_HOST=: "localhost"
      OPEN_DPP_MAIL_PORT: "8026"
      OPEN_DPP_MAIL_USER: "admin"
      OPEN_DPP_MAIL_PASSWORD: "admin"
      OPEN_DPP_MAIL_MAILPIT_SMTP_AUTH: "admin:admin"
      OPEN_DPP_MAIL_MAILPIT_SMTP_ALLOW_INSECURE: "true"
      # Auth
      OPEN_DPP_AUTH_SECRET: "change-this-to-a-good-secret"
      OPEN_DPP_AUTH_CLOUD_ENABLED: "false"
      OPEN_DPP_AUTH_CLOUD_PROVIDER: ""
      OPEN_DPP_AUTH_CLOUD_CLIENT_ID: ""
      OPEN_DPP_AUTH_CLOUD_CLIENT_SECRET: ""
      OPEN_DPP_AUTH_CLOUD_DISCOVERY_URL: ""
      # Frontend
      VITE_API_ROOT: "http://localhost"

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start database
        run: |
          docker compose -f docker-compose-test.yml up -d

      # Step 2: Install pnpm
      - name: Install pnpm
        uses: pnpm/action-setup@v4

      # Step 3: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      # Step 4: See https://docs.cypress.io/app/get-started/install-cypress#pnpm-configuration
      - name: Disable pnpm side-effects cache
        run: pnpm config set side-effects-cache false --location project

      # Step 5: Install dependencies
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Step 6: Cache cypress binaries (optional but helps CI performance)
      - name: Cache Cypress binary
        uses: actions/cache@v4
        with:
          path: ~/.cache/Cypress
          key: cypress-${{ runner.os }}-${{ hashFiles('pnpm-lock.yaml') }}

      # Step 7: Build project
      - name: Build project
        run: pnpm build

      # Step 8: Build testing support package
      - name: Build project
        run: cd packages/testing && pnpm build

      # Step 9: Wait for Databases to be ready
      - name: Wait for Databases to be ready
        run: |
          echo "Waiting for MongoDB to start..."
          until nc -z ${{ env.OPEN_DPP_MONGODB_HOST }} ${{ env.OPEN_DPP_MONGODB_PORT }}; do
            sleep 1
          done

      # Step 10: Run tests
      - name: Run tests
        run: pnpm test:ci

      # Step 11: Verify Cypress binary
      - name: Verify Cypress install
        run: npx cypress verify

      # Step 12: Run cypress tests
      - name: Run cypress tests
        run: pnpm test:ci:cypress

      # Step 13: Upload Cypress artifacts (optional)
      - name: Upload Cypress Artifacts
        if: always() # This ensures artifacts are uploaded even if the tests fail
        uses: actions/upload-artifact@v4
        with:
          name: cypress-artifacts
          path: |
            apps/client/cypress/videos/
            apps/client/cypress/screenshots/

  build-and-push:
    runs-on: ubuntu-latest
    needs:
      - lint
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker production metadata
        id: meta-production
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Extract Docker mcp metadata
        id: meta-mcp
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/mcp
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Production
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-production.outputs.tags }}
          labels: ${{ steps.meta-production.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push MCP Server
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          target: mcpserver
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-mcp.outputs.tags }}
          labels: ${{ steps.meta-mcp.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
