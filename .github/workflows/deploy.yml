name: Deploy Docker image via SSH

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy (e.g., latest, main, v1.2.3, sha)'
        required: false
        default: latest
      environment:
        type: environment
        description: 'Select the environment to deploy to'
        required: true

permissions:
  contents: read
  packages: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.event.inputs.image_tag }}
  DEPLOY_DIR: app

jobs:
  deploy:
    environment: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.HETZNER_SSH_PORT }} ${{ secrets.HETZNER_IPV4 }} >> ~/.ssh/known_hosts

      - name: Copy deployment files to server
        run: |
          ssh -p ${{ secrets.HETZNER_SSH_PORT }} root@${{ secrets.HETZNER_IPV4 }} "mkdir -p ${DEPLOY_DIR}"
          rsync -az --delete -e "ssh -p ${{ secrets.HETZNER_SSH_PORT }}" \
            docker-compose.yml public-env Caddyfile \
            root@${{ secrets.HETZNER_IPV4 }}:${{ env.DEPLOY_DIR }}/

      - name: Prepare env file on server
        run: |
          ssh -p ${{ secrets.HETZNER_SSH_PORT }} root@${{ secrets.HETZNER_IPV4 }} "cd ${DEPLOY_DIR} && cp -f public-env .env || true"

      - name: Log in to GHCR on server
        run: |
          ssh -p ${{ secrets.HETZNER_SSH_PORT }} root@${{ secrets.HETZNER_IPV4 }} "echo '${{ secrets.GITHUB_TOKEN }}' | docker login ghcr.io -u '${{ github.actor }}' --password-stdin"

      - name: Pull and (re-)start containers
        run: |
          ssh -p ${{ secrets.HETZNER_SSH_PORT }} root@${{ secrets.HETZNER_IPV4 }} "\
            cd ${DEPLOY_DIR} && \
            set -a; [ -f .env ] && . ./.env; set +a; \
            export AUTH_ADMIN_USERNAME='${{ secrets.AUTH_ADMIN_USERNAME }}'; \
            export AUTH_ADMIN_PWD='${{ secrets.AUTH_ADMIN_PWD }}'; \
            export API_SERVICE_TOKEN='${{ secrets.API_SERVICE_TOKEN }}'; \
            export MISTRAL_API_KEY='${{ secrets.MISTRAL_API_KEY }}'; \
            export OLLAMA_URL='${{ secrets.OLLAMA_URL }}'; \
            export SERVICE_APP_URL='${{ vars.SERVICE_APP_URL }}'; \
            export SERVICE_KEYCLOAK_URL='${{ vars.SERVICE_KEYCLOAK_URL }}'; \
            export SERVICE_MAILPIT_URL='${{ vars.SERVICE_MAILPIT_URL }}'; \
            export CADDY_TLS='${{ vars.CADDY_TLS }}'; \
            export SERVICE_CADDY_PORT='80'; \
            docker compose -f docker-compose.yml pull && \
            docker compose -f docker-compose.yml stop open-dpp mcp-server && \
            docker compose -f docker-compose.yml up -d \
          "